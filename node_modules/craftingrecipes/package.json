{
  "name": "craftingrecipes",
  "description": "recipes for crafting items with inventory and itempile",
  "version": "2.0.0",
  "main": "craftingrecipes.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:deathcap/craftingrecipes.git"
  },
  "keywords": [
    "game",
    "items",
    "itempile",
    "inventory",
    "crafting",
    "recipes"
  ],
  "dependencies": {
    "itempile": "^2.0.0",
    "inventory": "^2.0.0"
  },
  "devDependencies": {
    "browserify": "^8.1.3",
    "tape": "2.3.0"
  },
  "scripts": {
    "test": "node test.js"
  },
  "engines": [
    "node >=6"
  ],
  "license": "MIT",
  "readme": "# craftingrecipes\n\nRecipes for crafting items with [inventory](https://github.com/deathcap/inventory) and [itempile](https://github.com/deathcap/itempile).\n\n[![Build Status](https://travis-ci.org/deathcap/craftingrecipes.png)](https://travis-ci.org/deathcap/craftingrecipes)\n\nUsed by:\n\n* [voxel-workbench](https://github.com/deathcap/voxel-workbench) \n* [voxel-inventory-dialog](https://github.com/deathcap/voxel-inventory-dialog)\n* [voxel-pickaxe](https://github.com/deathcap/voxel-pickaxe)\n\n## Recipe Classes\n\nAll recipe classes implement:\n\n* `computeOutput(inventory)`: returns an ItemPile for the crafting result of the given inventory input ingredients, or undefined\n* `matches(inventory)`: returns true if this recipe matches the given ingredients\n* `craft(inventory)`: consumes input ingredients from inventory and returns ItemPile result, or undefined if doesn't match\n\nThe following recipe classes are implemented in this module:\n\n* `AmorphousRecipe`: ingredients are accepted in any order\n* `PositionalRecipe`: ingredients must match at certain positions\n\nYou can define your own recipe classes as long as they extend `Recipe` (see \n[voxel-pickaxe](https://github.com/deathcap/voxel-pickaxe)'s repair recipe for an example).\n\n## Recipe Lists\n\n`RecipeList` manages a list of recipes and can search an inventory against each of them.\nThis is the ordinary use case of this module. Register your recipes in `RecipeList` then\n`result = craft(inventory)` to search and craft.\n\ncraftingrecipes can be loaded through [voxel-plugins](https://github.com/deathcap/voxel-plugins)\nfor a centralized recipe list shared amongst multiple plugins.\n\n## Crafting Thesaurus\n\n`CraftingThesaurus` provides a mapping from a convenient general name to a specific\nitem name of that category. This is used to allow different items, all of the same\ngeneral \"type\", to be used as crafting inputs. Amorphous and positional recipes automatically\nsupport the thesaurus.\n\nThe thesaurus is useful when you have interchangeable items, for example, different species\nof wood, all usable in the same recipes (or different kinds of dyes, also intended to be\ninterchangeable, etc.). The general name \"wood.log\" can be registered for \"logOak\",\n\"logBirch\", and future potential items, then wood.log can be specified in a recipe definition\nas ingredients, and when matching the recipe against this ingredient, any of the listed items can be used. \n\nFor known registered names used by other plugins, see [the wiki](https://github.com/deathcap/craftingrecipes/wiki).\n\n## Examples\n\nSee unit tests\n\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deathcap/craftingrecipes/issues"
  },
  "_id": "craftingrecipes@2.0.0",
  "dist": {
    "shasum": "accce536052a97e6ad8d0617a137c086d4c5843b"
  },
  "_from": "craftingrecipes@2.0.0",
  "_resolved": "https://registry.npmjs.org/craftingrecipes/-/craftingrecipes-2.0.0.tgz"
}
