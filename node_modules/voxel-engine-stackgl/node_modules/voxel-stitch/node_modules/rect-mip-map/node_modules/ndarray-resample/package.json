{
  "name": "ndarray-resample",
  "version": "1.0.1",
  "description": "Resample using sinc kernels",
  "main": "resample.js",
  "directories": {
    "example": "example"
  },
  "browserify": {
    "transform": [
      "cwise"
    ]
  },
  "dependencies": {
    "ndarray-ops": "^1.2.2",
    "ndarray-fft": "^1.0.0",
    "ndarray-scratch": "^1.1.1",
    "cwise": "^1.0.7"
  },
  "devDependencies": {
    "ndarray": "^1.0.18",
    "baboon-image": "^2.0.0",
    "luminance": "^1.0.3",
    "ndarray-unpack": "^1.0.0",
    "save-pixels": "^2.2.0",
    "zeros": "^1.0.0",
    "tape": "^4.0.0",
    "test-fuzzy-array": "^1.0.1"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scijs/ndarray-resample.git"
  },
  "keywords": [
    "scijs",
    "downsample",
    "upsample",
    "resample",
    "ndarray",
    "sinc",
    "interpolation"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "contributors": [
    {
      "name": "Jasper van de Gronde",
      "email": "th.v.d.gronde@hccnet.nl"
    }
  ],
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "5018571a31388da17be61d3a026df4ac0b2d179d",
  "bugs": {
    "url": "https://github.com/scijs/ndarray-resample/issues"
  },
  "readme": "ndarray-resample\n================\nResamples an ndarray by an arbitrary (rational) factor using a sinc kernel.\n\n[![build status](https://secure.travis-ci.org/scijs/ndarray-resample.png)](http://travis-ci.org/scijs/ndarray-resample)\n\n## Example\nHere is a simple example showing how to downsample an image:\n\n```javascript\nvar baboon = require(\"luminance\")(require(\"baboon-image\"))\nvar x = require(\"zeros\")([256,256])\nrequire(\"ndarray-resample\")(x, baboon)\nrequire(\"save-pixels\")(x, \"png\").pipe(process.stdout)\n```\n\n#### Output\n![Output](example/baboon2.png)\n\n##Install\nInstall using [npm](https://www.npmjs.com/):\n\n    npm install ndarray-resample\n\n## API\n#### `require(\"ndarray-resample\")(output, input[, clamp_lo, clamp_hi])`\nResamples input by a factor of `output.shape/input.shape`, storing the result in output (this also means the factor can differ per dimension).\n\n* `output` gets the result of resampling\n* `input` is the array that gets resampled\n* `clamp_lo` is a threshold placed on the pixels\n* `clamp_hi` is an upper threhsold placed on the pixels\n\n**Note** that the pixel at the \"origin\" in the output corresponds to the pixel at the origin in the input. Also, the boundary conditions are periodic (for now).\n\n## License\n(c) 2013-2015 Mikola Lysenko, Jasper van de Gronde. MIT License\n",
  "_id": "ndarray-resample@1.0.1",
  "_from": "ndarray-resample@^1.0.0"
}
