{
  "name": "voxel-registry",
  "description": "A shared registry for managing item and block IDs (voxel.js plugin)",
  "version": "0.8.3",
  "main": "registry.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:voxel/voxel-registry.git"
  },
  "keywords": [
    "voxel",
    "registry",
    "items",
    "blocks"
  ],
  "devDependencies": {
    "tape": "4.4.0"
  },
  "scripts": {
    "test": "node test.js"
  },
  "license": "MIT",
  "readme": "# voxel-registry\n\nA shared registry for managing item and block IDs (voxel.js plugin)\n\n[![Build Status](https://travis-ci.org/voxel/voxel-registry.png)](https://travis-ci.org/voxel/voxel-registry)\n\n## Usage\n\nLoad with [voxel-plugins](https://github.com/voxel/voxel-plugins), then get the registry instance:\n\n    var registry = game.plugins.get('voxel-registry');\n\nTo register a new block:\n\n    registry.registerBlock(name, props);\n\n`name` should be a fixed textual identifier, `props` an object with information about the block.\nThe block will be allocated a numerical index value automatically, which can be used in the \nvoxel.js chunk data arrays. (The initial motivation for voxel-registry was to avoid hardcoded\nnumerical IDs, allowing blocks to be referred to across plugins by name, instead.) You can \ntranslate between IDs and names using this module (see the source for details).\n\nProperty names can be anything, but the following conventions are known:\n\n* texture: textures for rendering voxels\n* hardness: required time (seconds) to mine the block with no tool, used by [voxel-mine](https://github.com/voxel/voxel-mine)\n* effectiveTool: tool class name which gives a speedup when mining, used by [voxel-mine](https://github.com/voxel/voxel-mine)\n* itemDrop: name of item to drop when block is harvested, used by [voxel-harvest](https://github.com/voxel/voxel-harvest)\n\n\nItems are registered similarly:\n\n    registry.registerItem(name, props);\n\n* itemTexture: texture for rendering in an [inventory-window](https://github.com/deathcap/inventory-window)\n* maxDamage: maximum damage before a tool breaks, used by [voxel-harvest](https://github.com/voxel/voxel-harvest), [inventory-window](https://github.com/deathcap/inventory-window)\n* toolClass: general category of the tool, matches `effectiveTool`, used by [voxel-mine](https://github.com/voxel/voxel-mine)\n* speed: mining speedup multiplier when `toolClass` matches `effectiveTool`, used by [voxel-mine](https://github.com/voxel/voxel-mine)\n* displayName: human-readable name for GUI displays, returned by `getItemDisplayName(name)`\n\nBlocks are implicitly considered items.\n\n### Dynamic properties\n\nIf a property value is set to a function, then `registry.getProp(itemName, propName[, arg])`\nwill execute the function and return the result. If `arg` is given it will be passed to the function.\n\n### Item textures\n\n`getItemPileTexture(itemPile)` gets the texture URL(s) for an\n[itempile](https://github.com/deathcap/itempile) for display in GUIs.\nIf the texture is a 3D cube, this will be an array for each face, otherwise a string.\nTexture URLs are resolved through `game.materials.artPacks`, assumed to be an instance\nof [artpacks](https://github.com/deathcap/artpacks).\n\nIf `itemTexture` or `texture` is a dynamic property, then it will\nbe called with the item pile's `tags` as an argument.\n\n### Metablocks and states\n\nSometimes it is desirable to associate a small amount of extra data with a block\n(examples: on/off, orientation, age, height, growth, subtype, color, etc.). The\n`registerBlocks()` method can be used for this purpose:\n\n    registry.registerBlocks(name, count, props);\n\nwhere `count` is the number of \"states\" needed. Dynamic property functions\nwill be called with each corresponding metadata value (for example, count=16\ncorresponds to 0 to 15) as the argument. For examples of this API in\naction, see the\n[voxel-pumpkin](https://github.com/voxel/voxel-pumpkin) and\n[voxel-wool](https://github.com/voxel/voxel-wool) plugins.\n\nInternally, `count` blocks are registered with identical `props`, and\nthe index offset is used as the metadata/state, so `count` should be a\nsmall integer, as it is limited by and shared with the available block index space\n(e.g. 2^16 if voxel-engine `arrayType` is `Uint16Array`). However,\n[unlike Minecraft](http://minecraft.gamepedia.com/Data_values#Data), it is\nnot restricted to 4-bits (16) and can be sized precisely as needed. \n\nIf larger amounts of data are needed, arbitrary objects can be stored\nat a block location using [voxel-blockdata](https://github.com/voxel/voxel-blockdata) instead.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/voxel/voxel-registry/issues"
  },
  "_id": "voxel-registry@0.8.3",
  "_from": "voxel-registry@^0.8.1"
}
