{
  "name": "voxel-mesher",
  "version": "0.14.4",
  "description": "voxel mesher with ambient occlusion and transparency (voxel.js plugin)",
  "main": "mesh-plugin.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "block-models": "^0.1.0",
    "cwise-compiler": "1.1.0",
    "gl-buffer": "^2.0.8",
    "gl-mat4": "^1.1.2",
    "gl-vao": "^1.1.3",
    "greedy-mesher": "^1.0.2",
    "inherits": "^2.0.1",
    "ndarray": "^1.0.15",
    "ndarray-ops": "^1.2.2",
    "typedarray-pool": "^1.0.2"
  },
  "devDependencies": {
    "ndarray-fill": "^1.0.1",
    "ndarray-segment": "0.0.0",
    "tap": "^0.6.0",
    "voxel": "^0.5.0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/voxel/voxel-mesher.git"
  },
  "keywords": [
    "voxel",
    "plugin",
    "ambient",
    "occlusion",
    "mesher",
    "ndarray",
    "transparency",
    "translucency"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "contributors": [
    {
      "name": "deathcap",
      "email": "deathcap@gmx.co.uk"
    }
  ],
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/voxel/voxel-mesher/issues"
  },
  "readme": "voxel-mesher\n============\nA voxel mesher for ndarrays that handles ambient occlusion and transparency.\n\nBased on @mikolalysenko's [ao-mesher](https://github.com/mikolalysenko/ao-mesher)\n\n[![Build Status](https://travis-ci.org/voxel/voxel-mesher.png)](https://travis-ci.org/voxel/voxel-mesher)\n\n## Install\n\n    npm install voxel-mesher\n\nLoad with [voxel-plugins](https://github.com/voxel/voxel-plugins)\n\n### API\n\n    var mesher = game.plugins.get('voxel-mesher');\n\n    var mesh = mesher.createVoxelMesh(voxels, voxelSideTextureIDs, voxelSideTextureSizes, position, pad)\n\nConstructs a mesh for `voxels`.\n\n* `voxels`: 3D ndarray of voxels\n* `voxelSideTextureIDs`: 2D ndarray (15-bit voxel ID, side 0-6) to 16-bit texture ID, defaults to voxel ID\n* `voxelSideTextureSizes`: 2D ndarray (15-bit voxel ID, side 0-6) to log2(texture size), defaults to 4 (2^4=16)\n* `position`: vector `[x,y,z]` of this chunk's position\n* `pad`: twice the number of voxels to pad around each edge (4)\n\nReturns a typed array encoding the mesh, or else null if there were no facets.\nThis is in the same format that [voxel-shader](https://github.com/voxel/voxel-shader) expects:\n\n    {\n        vertexArrayObjects: {surface: ..., porous: ...},\n        center: [x, y, z],\n        radius: w,\n        modelMatrix: mat4\n    }\n\nOther plugins can add their own VAOs to `vertexArrayObjects`, by listening for the `meshed` event:\n\n    mesher.on('meshed', function(result, gl, vert_data, voxels) {\n        result.vertexArrayObjects.myVAO = ...\n    });\n\nThis event is used by [voxel-wireframe](https://github.com/voxel/voxel-wireframe) and [voxel-chunkborder](https://github.com/voxel/voxel-chunkborder).\n\n### Voxel types\n\n[voxel-registry](https://github.com/voxel/voxel-registry) is used to lookup voxel information for meshing,\nthe following properties are supported:\n\n* `transparent`: if true, the voxel textures have transparency, otherwise assumed fully opaque\n* `blockModel`: if present, passed to [block-models](https://github.com/deathcap/block-models) for custom non-cube models\n\nThese properties determines the voxel type and how they are meshed:\n\n* *Solid*: phase 1 rendering pass - included in `surface` VAO\n * *Opaque*: default, bit 15 set (example: dirt)\n * *Transparent*: property `transparent` true, bit 15 clear (example: glass)\n* *Porous*: phase 2 rendering pass - included in `porous` VAO\n * `blockModel` property present\n * Allows for translucent (example: stained glass) and custom model (example: slabs) blocks\n\n# Credits\n(c) 2013 Mikola Lysenko, (c) 2014-2015 deathcap. MIT License\n",
  "_id": "voxel-mesher@0.14.4",
  "_from": "voxel-mesher@^0.14.3"
}
