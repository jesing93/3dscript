{
  "name": "inventory",
  "description": "item inventory management",
  "version": "2.0.0",
  "main": "inventory.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:deathcap/inventory.git"
  },
  "keywords": [
    "game",
    "items",
    "piles",
    "group",
    "itempile",
    "itemstack",
    "inventory"
  ],
  "dependencies": {
    "itempile": "^2.0.0",
    "deep-equal": "^1.0.0"
  },
  "engines": [
    "node >=4"
  ],
  "devDependencies": {
    "tape": "^4.4.0"
  },
  "scripts": {
    "test": "node test.js"
  },
  "license": "MIT",
  "readme": "# inventory\n\nSimple finite stackable item inventories (for games).\n\n[![Build Status](https://travis-ci.org/deathcap/inventory.png)](https://travis-ci.org/deathcap/inventory)\n\nRequires a ES6-compatible environment (tested on Node v4.2.4)\n\n## Creation\n\nA new inventory can be created given its desired size (number of slots):\n\n    var Inventory = require('inventory');\n    var inv = new Inventory(5);\n\nIf omitted, defaults to 10. You can pass two arguments for 2D inventory:\n\n    new Inventory(3, 2)\n\ncreates a 3x2 = 6 slot inventory (3 columns, 2 rows). Internally it still\nstored as one-dimensional, but other modules can query the dimensions\n(width and height).\n\n## Adding items\n\nItems are added to an inventory using `give`, passing an [itempile](https://github.com/deathcap/itempile) instance:\n\n    inv.give(new ItemPile('dirt', 42));\n\nwill add 42 dirt to `inv`, returning the quantity that could not be added if the inventory is full.\n`give` first searches for existing piles and attempts to merge if possible, otherwise it will occupy an\nempty slot. \n\nThis merging algorithm can be demonstrated by repeatingly giving 42 dirt and calling `toString` to see the contents:\n\n    42:dirt\n    64:dirt\t20:dirt\n    64:dirt\t62:dirt\n    64:dirt\t64:dirt\t40:dirt\n    etc.\n\nThe items pile up to `ItemPile.maxPileSize`, default 64. Note you can also give over-sized piles and the items\nwill be distributed in the inventory identically (giving e.g., 42 * 3, same as giving 42 three times).\n\n## Removing items\n\nSimilarly, `take` removes items:\n\n    inv.take(new ItemPile('dirt', 1));\n\nreturns a new `ItemPile` of 1 dirt, if present, and removes the same quantity from `inv`. If called on the\ninventory in the above example, the new contents will be:\n\n    63:dirt\t64:dirt\t40:dirt\n\nFor more examples see the unit tests.\n\n## Displaying items\n\nThis module only manages the inventory data structure. For graphical user interfaces to the inventory, check out:\n\n* [voxel-inventory-toolbar](https://github.com/deathcap/voxel-inventory-toolbar)\n* [inventory-window](https://github.com/deathcap/inventory-window)\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deathcap/inventory/issues"
  },
  "_id": "inventory@2.0.0",
  "dist": {
    "shasum": "d6cdece0f4477a61114aecaf3768b2dc678945cd"
  },
  "_from": "inventory@2.0.0",
  "_resolved": "https://registry.npmjs.org/inventory/-/inventory-2.0.0.tgz"
}
