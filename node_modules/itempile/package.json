{
  "name": "itempile",
  "description": "split and merge 'piles' of items",
  "version": "2.0.0",
  "main": "itempile.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:deathcap/itempile.git"
  },
  "keywords": [
    "game",
    "items",
    "piles",
    "group",
    "itemstack",
    "inventory"
  ],
  "dependencies": {
    "clone": "^1.0.2",
    "deep-equal": "^1.0.1"
  },
  "devDependencies": {
    "tape": "^4.4.0"
  },
  "engines": [
    "node >=4"
  ],
  "scripts": {
    "test": "node test.js"
  },
  "license": "MIT",
  "readme": "# itempile\n\nA data structure for groups of identical objects, up to a maximum number. \nUseful for games. (This module was previously known as \"itemstack\".)\n\n[![Build Status](https://travis-ci.org/deathcap/itempile.png)](https://travis-ci.org/deathcap/itempile)\n\nCan be used standalone but most useful with [inventory](https://github.com/deathcap/inventory).\n\nRequires a ES6-compatible environment (at least partially), tested on Node v4.2.4\n\n## Creating\n\nAn item pile can be created simply with an item name and count, for example:\n\n    var ItemPile = require('itempile');\n\n    var x = new ItemPile('dirt', 10);\n\nrepresents a quantity of 10 dirt. The item type can be an any comparable object\n(singleton); these examples use strings. The quantity can be omitted to use a default of \"1\".\n\n## Merging \n\nPiles of the same type can be merged:\n\n    var a = new ItemPile('dirt', 10);\n    var b = new ItemPile('dirt', 20);\n\n    a.mergePile(b);\n\nresults in `a` increasing to 30 and `b` to 0. `mergePile` returns `false` if the piles differ\nin type and cannot be merged, otherwise the number of items that did not fit (excess above\nthe maximum pile size):\n\n    var a = new ItemPile('dirt', 1);\n    var b = new ItemPile('dirt', 80);\n\n    a.mergePile(b);\n\nincreases the count of `a` to 64, the default `ItemPile.maxStackSize` limit, and decreases `b` to 17.\nThe sum of the two pile counts remains invariant, the quantity has just shifted between the two. \n\n## Splitting\n\nWant to take items from a pile? Split the pile, specifying the number of items you want:\n\n    var a = new ItemPile('dirt', 64)\n    var b = a.splitPile(16)\n\n`b` is a new pile with 16 dirt, `a` is lowered to the remaining 48 dirt. For convenience you can alternatively pass a\ndecimal fraction (such as 0.5, splits the pile in half), or a negative integer (-1 to take all but one).\n\n## Other operations\n\nMerging/splitting are the most important but several other methods are provided,\nsee the unit tests for further examples.\n\n## Advanced piles\n\nYou can create piles of infinite size:\n\n    new ItemPile('diamond', Infinity)\n\nand they behave as you expect, sinking unlimited items when merging and sourcing unlimited items when splitting.\n\nExtra data can be attached to a pile, using the \"tags\" parameter:\n\n    new ItemPile('pick', 1, {damage:0})\n\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deathcap/itempile/issues"
  },
  "_id": "itempile@2.0.0",
  "dist": {
    "shasum": "cac818d56ffdec08016c1b542556e7b677582af4"
  },
  "_from": "itempile@2.0.0",
  "_resolved": "https://registry.npmjs.org/itempile/-/itempile-2.0.0.tgz"
}
